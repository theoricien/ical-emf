/**
 */
package iCal.provider;

import iCal.util.ICalAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ICalItemProviderAdapterFactory extends ICalAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ICalItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link iCal.iCalFormat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected iCalFormatItemProvider iCalFormatItemProvider;

	/**
	 * This creates an adapter for a {@link iCal.iCalFormat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createiCalFormatAdapter() {
		if (iCalFormatItemProvider == null) {
			iCalFormatItemProvider = new iCalFormatItemProvider(this);
		}

		return iCalFormatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iCal.EventC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventCItemProvider eventCItemProvider;

	/**
	 * This creates an adapter for a {@link iCal.EventC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventCAdapter() {
		if (eventCItemProvider == null) {
			eventCItemProvider = new EventCItemProvider(this);
		}

		return eventCItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iCal.ToDoC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToDoCItemProvider toDoCItemProvider;

	/**
	 * This creates an adapter for a {@link iCal.ToDoC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToDoCAdapter() {
		if (toDoCItemProvider == null) {
			toDoCItemProvider = new ToDoCItemProvider(this);
		}

		return toDoCItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iCal.Calendar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalendarItemProvider calendarItemProvider;

	/**
	 * This creates an adapter for a {@link iCal.Calendar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalendarAdapter() {
		if (calendarItemProvider == null) {
			calendarItemProvider = new CalendarItemProvider(this);
		}

		return calendarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iCal.JournalC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JournalCItemProvider journalCItemProvider;

	/**
	 * This creates an adapter for a {@link iCal.JournalC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJournalCAdapter() {
		if (journalCItemProvider == null) {
			journalCItemProvider = new JournalCItemProvider(this);
		}

		return journalCItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iCal.VacationC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VacationCItemProvider vacationCItemProvider;

	/**
	 * This creates an adapter for a {@link iCal.VacationC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVacationCAdapter() {
		if (vacationCItemProvider == null) {
			vacationCItemProvider = new VacationCItemProvider(this);
		}

		return vacationCItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iCal.TimeZoneC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeZoneCItemProvider timeZoneCItemProvider;

	/**
	 * This creates an adapter for a {@link iCal.TimeZoneC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeZoneCAdapter() {
		if (timeZoneCItemProvider == null) {
			timeZoneCItemProvider = new TimeZoneCItemProvider(this);
		}

		return timeZoneCItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iCal.tzprop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected tzpropItemProvider tzpropItemProvider;

	/**
	 * This creates an adapter for a {@link iCal.tzprop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createtzpropAdapter() {
		if (tzpropItemProvider == null) {
			tzpropItemProvider = new tzpropItemProvider(this);
		}

		return tzpropItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iCal.AlarmC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AlarmCItemProvider alarmCItemProvider;

	/**
	 * This creates an adapter for a {@link iCal.AlarmC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAlarmCAdapter() {
		if (alarmCItemProvider == null) {
			alarmCItemProvider = new AlarmCItemProvider(this);
		}

		return alarmCItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iCal.ComponentAlarmTime} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentAlarmTimeItemProvider componentAlarmTimeItemProvider;

	/**
	 * This creates an adapter for a {@link iCal.ComponentAlarmTime}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentAlarmTimeAdapter() {
		if (componentAlarmTimeItemProvider == null) {
			componentAlarmTimeItemProvider = new ComponentAlarmTimeItemProvider(this);
		}

		return componentAlarmTimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iCal.ComponentAlarmAudioProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentAlarmAudioPropertyItemProvider componentAlarmAudioPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link iCal.ComponentAlarmAudioProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentAlarmAudioPropertyAdapter() {
		if (componentAlarmAudioPropertyItemProvider == null) {
			componentAlarmAudioPropertyItemProvider = new ComponentAlarmAudioPropertyItemProvider(this);
		}

		return componentAlarmAudioPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iCal.ComponentAlarmDispProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentAlarmDispPropertyItemProvider componentAlarmDispPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link iCal.ComponentAlarmDispProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentAlarmDispPropertyAdapter() {
		if (componentAlarmDispPropertyItemProvider == null) {
			componentAlarmDispPropertyItemProvider = new ComponentAlarmDispPropertyItemProvider(this);
		}

		return componentAlarmDispPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iCal.ComponentAlarmEmailProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentAlarmEmailPropertyItemProvider componentAlarmEmailPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link iCal.ComponentAlarmEmailProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentAlarmEmailPropertyAdapter() {
		if (componentAlarmEmailPropertyItemProvider == null) {
			componentAlarmEmailPropertyItemProvider = new ComponentAlarmEmailPropertyItemProvider(this);
		}

		return componentAlarmEmailPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iCal.tzpropOptional} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected tzpropOptionalItemProvider tzpropOptionalItemProvider;

	/**
	 * This creates an adapter for a {@link iCal.tzpropOptional}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createtzpropOptionalAdapter() {
		if (tzpropOptionalItemProvider == null) {
			tzpropOptionalItemProvider = new tzpropOptionalItemProvider(this);
		}

		return tzpropOptionalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iCal.DateT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateTItemProvider dateTItemProvider;

	/**
	 * This creates an adapter for a {@link iCal.DateT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateTAdapter() {
		if (dateTItemProvider == null) {
			dateTItemProvider = new DateTItemProvider(this);
		}

		return dateTItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (iCalFormatItemProvider != null)
			iCalFormatItemProvider.dispose();
		if (eventCItemProvider != null)
			eventCItemProvider.dispose();
		if (toDoCItemProvider != null)
			toDoCItemProvider.dispose();
		if (calendarItemProvider != null)
			calendarItemProvider.dispose();
		if (journalCItemProvider != null)
			journalCItemProvider.dispose();
		if (vacationCItemProvider != null)
			vacationCItemProvider.dispose();
		if (timeZoneCItemProvider != null)
			timeZoneCItemProvider.dispose();
		if (tzpropItemProvider != null)
			tzpropItemProvider.dispose();
		if (alarmCItemProvider != null)
			alarmCItemProvider.dispose();
		if (componentAlarmTimeItemProvider != null)
			componentAlarmTimeItemProvider.dispose();
		if (componentAlarmAudioPropertyItemProvider != null)
			componentAlarmAudioPropertyItemProvider.dispose();
		if (componentAlarmDispPropertyItemProvider != null)
			componentAlarmDispPropertyItemProvider.dispose();
		if (componentAlarmEmailPropertyItemProvider != null)
			componentAlarmEmailPropertyItemProvider.dispose();
		if (tzpropOptionalItemProvider != null)
			tzpropOptionalItemProvider.dispose();
		if (dateTItemProvider != null)
			dateTItemProvider.dispose();
	}

}
